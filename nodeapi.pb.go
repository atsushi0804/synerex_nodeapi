// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodeapi.proto

package synerex_nodeapi // import "github.com/synerex/synerex_nodeapi"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeepAliveCommand int32

const (
	KeepAliveCommand_NONE      KeepAliveCommand = 0
	KeepAliveCommand_RECONNECT KeepAliveCommand = 1
)

var KeepAliveCommand_name = map[int32]string{
	0: "NONE",
	1: "RECONNECT",
}
var KeepAliveCommand_value = map[string]int32{
	"NONE":      0,
	"RECONNECT": 1,
}

func (x KeepAliveCommand) String() string {
	return proto.EnumName(KeepAliveCommand_name, int32(x))
}
func (KeepAliveCommand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodeapi_ce5167fc7b7ca9a5, []int{0}
}

type NodeInfo struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	IsServer             bool     `protobuf:"varint,2,opt,name=is_server,json=isServer,proto3" json:"is_server,omitempty"`
	NodePbaseVersion     string   `protobuf:"bytes,3,opt,name=node_pbase_version,json=nodePbaseVersion,proto3" json:"node_pbase_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeapi_ce5167fc7b7ca9a5, []int{0}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeInfo) GetIsServer() bool {
	if m != nil {
		return m.IsServer
	}
	return false
}

func (m *NodeInfo) GetNodePbaseVersion() string {
	if m != nil {
		return m.NodePbaseVersion
	}
	return ""
}

type NodeID struct {
	NodeId               int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Secret               uint64   `protobuf:"fixed64,2,opt,name=secret,proto3" json:"secret,omitempty"`
	KeepaliveDuration    int32    `protobuf:"varint,3,opt,name=keepalive_duration,json=keepaliveDuration,proto3" json:"keepalive_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeID) Reset()         { *m = NodeID{} }
func (m *NodeID) String() string { return proto.CompactTextString(m) }
func (*NodeID) ProtoMessage()    {}
func (*NodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeapi_ce5167fc7b7ca9a5, []int{1}
}
func (m *NodeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeID.Unmarshal(m, b)
}
func (m *NodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeID.Marshal(b, m, deterministic)
}
func (dst *NodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeID.Merge(dst, src)
}
func (m *NodeID) XXX_Size() int {
	return xxx_messageInfo_NodeID.Size(m)
}
func (m *NodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeID.DiscardUnknown(m)
}

var xxx_messageInfo_NodeID proto.InternalMessageInfo

func (m *NodeID) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeID) GetSecret() uint64 {
	if m != nil {
		return m.Secret
	}
	return 0
}

func (m *NodeID) GetKeepaliveDuration() int32 {
	if m != nil {
		return m.KeepaliveDuration
	}
	return 0
}

type NodeUpdate struct {
	NodeId               int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Secret               uint64   `protobuf:"fixed64,2,opt,name=secret,proto3" json:"secret,omitempty"`
	UpdateCount          int32    `protobuf:"varint,3,opt,name=update_count,json=updateCount,proto3" json:"update_count,omitempty"`
	NodeStatus           int32    `protobuf:"varint,4,opt,name=node_status,json=nodeStatus,proto3" json:"node_status,omitempty"`
	NodeArg              string   `protobuf:"bytes,5,opt,name=node_arg,json=nodeArg,proto3" json:"node_arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeUpdate) Reset()         { *m = NodeUpdate{} }
func (m *NodeUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeUpdate) ProtoMessage()    {}
func (*NodeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeapi_ce5167fc7b7ca9a5, []int{2}
}
func (m *NodeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUpdate.Unmarshal(m, b)
}
func (m *NodeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUpdate.Marshal(b, m, deterministic)
}
func (dst *NodeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUpdate.Merge(dst, src)
}
func (m *NodeUpdate) XXX_Size() int {
	return xxx_messageInfo_NodeUpdate.Size(m)
}
func (m *NodeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUpdate proto.InternalMessageInfo

func (m *NodeUpdate) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeUpdate) GetSecret() uint64 {
	if m != nil {
		return m.Secret
	}
	return 0
}

func (m *NodeUpdate) GetUpdateCount() int32 {
	if m != nil {
		return m.UpdateCount
	}
	return 0
}

func (m *NodeUpdate) GetNodeStatus() int32 {
	if m != nil {
		return m.NodeStatus
	}
	return 0
}

func (m *NodeUpdate) GetNodeArg() string {
	if m != nil {
		return m.NodeArg
	}
	return ""
}

type Response struct {
	Ok                   bool             `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Command              KeepAliveCommand `protobuf:"varint,2,opt,name=command,proto3,enum=nodeapi.KeepAliveCommand" json:"command,omitempty"`
	Err                  string           `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeapi_ce5167fc7b7ca9a5, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetCommand() KeepAliveCommand {
	if m != nil {
		return m.Command
	}
	return KeepAliveCommand_NONE
}

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "nodeapi.NodeInfo")
	proto.RegisterType((*NodeID)(nil), "nodeapi.NodeID")
	proto.RegisterType((*NodeUpdate)(nil), "nodeapi.NodeUpdate")
	proto.RegisterType((*Response)(nil), "nodeapi.Response")
	proto.RegisterEnum("nodeapi.KeepAliveCommand", KeepAliveCommand_name, KeepAliveCommand_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeID, error)
	QueryNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*NodeInfo, error)
	KeepAlive(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (*Response, error)
	UnRegisterNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Response, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) RegisterNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeID, error) {
	out := new(NodeID)
	err := c.cc.Invoke(ctx, "/nodeapi.Node/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) QueryNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, "/nodeapi.Node/QueryNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) KeepAlive(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/nodeapi.Node/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UnRegisterNode(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/nodeapi.Node/UnRegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	RegisterNode(context.Context, *NodeInfo) (*NodeID, error)
	QueryNode(context.Context, *NodeID) (*NodeInfo, error)
	KeepAlive(context.Context, *NodeUpdate) (*Response, error)
	UnRegisterNode(context.Context, *NodeID) (*Response, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeapi.Node/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RegisterNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_QueryNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).QueryNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeapi.Node/QueryNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).QueryNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeapi.Node/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).KeepAlive(ctx, req.(*NodeUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UnRegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UnRegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeapi.Node/UnRegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UnRegisterNode(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodeapi.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Node_RegisterNode_Handler,
		},
		{
			MethodName: "QueryNode",
			Handler:    _Node_QueryNode_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _Node_KeepAlive_Handler,
		},
		{
			MethodName: "UnRegisterNode",
			Handler:    _Node_UnRegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeapi.proto",
}

func init() { proto.RegisterFile("nodeapi.proto", fileDescriptor_nodeapi_ce5167fc7b7ca9a5) }

var fileDescriptor_nodeapi_ce5167fc7b7ca9a5 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xd3, 0xc4, 0xb5, 0xa7, 0x6d, 0x70, 0x07, 0x09, 0xdc, 0x72, 0xa0, 0x58, 0x1c, 0x2a,
	0x3e, 0x82, 0x68, 0x81, 0x7b, 0x49, 0x72, 0xa8, 0x90, 0x5c, 0xd8, 0x52, 0x0e, 0x5c, 0xac, 0x4d,
	0x3c, 0xa4, 0x56, 0xb0, 0xd7, 0xda, 0xb5, 0x23, 0xfa, 0x5f, 0xf8, 0x6d, 0xfc, 0x16, 0xb4, 0x13,
	0x3b, 0x90, 0x22, 0x21, 0xf5, 0x64, 0xcf, 0x7b, 0xf3, 0xe6, 0x3d, 0xcf, 0x7a, 0x61, 0xaf, 0x50,
	0x29, 0xc9, 0x32, 0x1b, 0x96, 0x5a, 0x55, 0x0a, 0xb7, 0x9b, 0x32, 0xd2, 0xe0, 0xc5, 0x2a, 0xa5,
	0xf3, 0xe2, 0x9b, 0xc2, 0x47, 0xe0, 0x5b, 0x38, 0x29, 0x64, 0x4e, 0xa1, 0x73, 0xe4, 0x1c, 0xfb,
	0xc2, 0xb3, 0x40, 0x2c, 0x73, 0xb2, 0x64, 0x66, 0x12, 0x43, 0x7a, 0x49, 0x3a, 0xec, 0x1e, 0x39,
	0xc7, 0x9e, 0xf0, 0x32, 0x73, 0xc9, 0x35, 0xbe, 0x00, 0x64, 0x65, 0x39, 0x95, 0x86, 0x92, 0x25,
	0x69, 0x93, 0xa9, 0x22, 0xdc, 0xe2, 0x11, 0x81, 0x65, 0x3e, 0x5a, 0xe2, 0xcb, 0x0a, 0x8f, 0xae,
	0xc1, 0x65, 0xcf, 0x31, 0x3e, 0x04, 0x0e, 0x92, 0x64, 0x29, 0xfb, 0xf5, 0x85, 0x6b, 0xcb, 0xf3,
	0x14, 0x1f, 0x80, 0x6b, 0x68, 0xa6, 0xa9, 0x62, 0x2b, 0x57, 0x34, 0x15, 0xbe, 0x04, 0x5c, 0x10,
	0x95, 0xf2, 0x7b, 0xb6, 0xa4, 0x24, 0xad, 0xb5, 0xac, 0x5a, 0xa3, 0xbe, 0xd8, 0x5f, 0x33, 0xe3,
	0x86, 0x88, 0x7e, 0x3a, 0x00, 0xd6, 0xea, 0xaa, 0x4c, 0x65, 0x45, 0x77, 0xb7, 0x7b, 0x02, 0xbb,
	0x35, 0x4b, 0x93, 0x99, 0xaa, 0x8b, 0xaa, 0x31, 0xda, 0x59, 0x61, 0x23, 0x0b, 0xe1, 0x63, 0xd8,
	0xe1, 0x99, 0xa6, 0x92, 0x55, 0x6d, 0xc2, 0x1e, 0x77, 0x80, 0x85, 0x2e, 0x19, 0xc1, 0x03, 0xe0,
	0x25, 0x26, 0x52, 0xcf, 0xc3, 0x3e, 0x6f, 0x84, 0x43, 0x9c, 0xe9, 0x79, 0x24, 0xc1, 0x13, 0x64,
	0x4a, 0x55, 0x18, 0xc2, 0x01, 0x74, 0xd5, 0x82, 0x63, 0x79, 0xa2, 0xab, 0x16, 0x78, 0x0a, 0xdb,
	0x33, 0x95, 0xe7, 0xb2, 0x48, 0x39, 0xd3, 0xe0, 0xe4, 0x60, 0xd8, 0x1e, 0xe1, 0x07, 0xa2, 0xf2,
	0xcc, 0x7e, 0xe7, 0x68, 0xd5, 0x20, 0xda, 0x4e, 0x0c, 0x60, 0x8b, 0xb4, 0x6e, 0x16, 0x6f, 0x5f,
	0x9f, 0x3d, 0x87, 0xe0, 0x76, 0x3b, 0x7a, 0xd0, 0x8b, 0x2f, 0xe2, 0x49, 0xd0, 0xc1, 0x3d, 0xf0,
	0xc5, 0x64, 0x74, 0x11, 0xc7, 0x93, 0xd1, 0xe7, 0xc0, 0x39, 0xf9, 0xe5, 0x40, 0xcf, 0xae, 0x0b,
	0xdf, 0xc0, 0xae, 0xa0, 0x79, 0x66, 0x2a, 0xd2, 0x5c, 0xef, 0xaf, 0xbd, 0xdb, 0x9f, 0xe5, 0xf0,
	0xde, 0x26, 0x34, 0x8e, 0x3a, 0xf8, 0x1a, 0xfc, 0x4f, 0x35, 0xe9, 0x1b, 0x96, 0xdc, 0xe6, 0x0f,
	0xff, 0x9d, 0x11, 0x75, 0xf0, 0x2d, 0xf8, 0xeb, 0x78, 0x78, 0x7f, 0xa3, 0x63, 0x75, 0x66, 0x7f,
	0xc9, 0xda, 0x55, 0x45, 0x1d, 0x7c, 0x07, 0x83, 0xab, 0x62, 0x23, 0xe1, 0x7f, 0xec, 0xfe, 0xe8,
	0xde, 0x3f, 0xfd, 0x1a, 0xcd, 0xb3, 0xea, 0xba, 0x9e, 0x0e, 0x67, 0x2a, 0x7f, 0x65, 0x6e, 0x0a,
	0xd2, 0xf4, 0xa3, 0x7d, 0x26, 0x8d, 0x60, 0xea, 0xf2, 0x1d, 0x39, 0xfd, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x39, 0xa4, 0xf4, 0x8e, 0x34, 0x03, 0x00, 0x00,
}
